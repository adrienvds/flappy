function preload() {
    game.load.baseURL = 'http://examples.phaser.io/assets/';
    game.load.crossOrigin = 'anonymous';
    game.load.image('phaser', 'sprites/phaser-dude.png');
    game.load.image('orb', 'sprites/orb-red.png');
    var wall=[
        '11111111',
        '11111111',
        '11111111',
        '11111111',
        '11111111',
        '11111111',
        '11111111',
        '11111111'
        ];
        game.create.texture('wall',wall,6,6,0);

}







var jump=-400;
var score=0;
var scoretexte;
var orb;
var up=5;
var down=5;
var speed=100;
var arrows;
var player;
var walls;
var gameover=false;
var triggers;

function create() {
    
    
    game.physics.startSystem(Phaser.Physics.Arcade);
    game.physics.arcade.gravity.y=980;
    
    
    scoretexte=game.add.text(20,100,"score="+score,{fill:"#ffffff",font:"16px Permanent Marker",align:"center"});
    walls=game.add.group();
    walls.add(game.add.tileSprite(1050,500,100,600,'wall'));
    walls.add(game.add.tileSprite(1400,0,100,100,'wall'));
    walls.add(game.add.tileSprite(1400,300,100,600,'wall'));
    walls.add(game.add.tileSprite(1750,0,100,200,'wall'));
    walls.add(game.add.tileSprite(1750,400,100,600,'wall'));
    game.physics.arcade.enable(walls);
    walls.setAll('body.allowGravity',false);
    walls.setAll('body.collideWorldBounds',false);
    game.stage.backgroundColor="#AA2222";
    
    triggers=game.add.group();
    triggers.add(game.add.sprite(1050,300,null));
    triggers.add(game.add.sprite(1400,100,null));
    triggers.add(game.add.sprite(1750,200,null));
    game.physics.arcade.enable(triggers);
    walls.setAll('body.allowGravity',false);
    walls.setAll('body.collideWorldBounds',false);
    //activat physics(3lignes)
    triggers.forEach(giveSize);
    
    
    
    
    
    
    
    player = game.add.sprite(0, 0, 'phaser');
    game.physics.arcade.enable(player);
    player.body.collideWorldBounds=true;
    
    orb=game.add.sprite(600,180,'orb'); 
    game.physics.arcade.enable(orb);
    orb.body.allowGravity=false;
    orb.anchor.setTo(0.5,0.5);
    
    arrows=game.input.keyboard.createCursorKeys();
    
    player.isCrossing=false;
}

function giveSize(item)
{
    item.body.setSize(100,200);
}







function update() {
    if(!gameover){
        var isCrossing=false;
        //overlap
        if(player.isCrossing&&!isCrossing){
        score=score+1;
        player.isCrossing=false
        }
    /*if(arrows.left.isDown)
    { 
        player.x=player.x-speed; 
        //sprite.x-speed;
    }else if(arrows.right.isDown){
        player.x=player.x+speed;  
     
    }
    if(arrows.down.isDown){
        player.y=player.y+down;
        
        
    }
    if(arrows.up.isDown){
        player.y=player.y-down;
    }*/
    checkkeys();
    animateOrb(orb,150);
    game.physics.arcade.overlap(player,orb,miam,null,this);
    
    
    triggers.forEach(moveWalls);
    walls.forEach(moveWalls);
    game.physics.arcade.collide(player,walls,paf);
    game.physics.arcade.overlap(player,triggers,reset,null,this);
    
}
function animateOrb(myOrb,speedOrb){
    myOrb.body.angularVelocity=speedOrb;   
}

 function miam(a,b)
 {
     //console.log("miam");
     var newx=game.rnd.integerInRange(0,800);
     var newy=game.rnd.integerInRange(0,600);
     b.reset(newx ,newy);
     score=score+1;
     scoretexte.text="score="+score;
 }
function checkkeys(){
    if(arrows.left.isDown)
    {
        player.body.velocity.x=-speed;
    }else if(arrows.right.isDown){
        //player.x=player.x+speed;  
     player.body.velocity.x= speed;
    }
    
    if(arrows.up.downDuration(50)){
        //player.y=player.y-down;
        player.body.velocity.y= jump;
        }
        
        
    }
}
function moveWalls(item){
    item.body.velocity.x=-400;
    if(item.x<=-100){
        item.x=1050;
        
        
        
        
    }
}
function paf(player,wall){
    gameover=true;
    game.physics.arcade.disable(player);
    
    
    
    
    
    
    
}
function reset(){
    isCrossing=true;
    player.isCrossing=true;
    
}










function render() {
    //  game.debug.body(orb);
  //  game.debug.body(player)

}
